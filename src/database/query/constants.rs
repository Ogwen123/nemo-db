pub enum Token {
    Add,
    All,
    Alter,
    And,
    Any,
    As,
    Asc,
    Backup,
    Between,
    By,
    Case,
    Check,
    Column,
    Constraint,
    Create,
    Database,
    Default,
    Delete,
    Desc,
    Distinct,
    Drop,
    Exec,
    Exists,
    Foreign,
    From,
    Full,
    Group,
    Having,
    In,
    Index,
    Inner,
    Insert,
    Into,
    Is,
    Join,
    Key,
    Left,
    Like,
    Limit,
    Not,
    Null,
    Or,
    Order,
    Outer,
    Primary,
    Procedure,
    Right,
    Rownum,
    Select,
    Set,
    Table,
    Top,
    Truncate,
    Union,
    Unique,
    Update,
    Values,
    View,
    Where,
    AddOperator,
    SubtractOperator,
    MultiplyOperator,
    DivideOperator,
    ModuloOperator,
    BitwiseAndOperator,
    BitwiseOrOperator,
    BitwiseXorOperator,
    EqualsOperator,
    GreaterOperator,
    LessOperator,
    GreaterEqualOperator,
    LessEqualOperator,
    NotEqualOperator,
    IdentifierValue(String),
    OperatorInt(i32),
    OperatorFloat(f64)
}

enum Value {
    Str(String),
    Int(i32),
    Float(f64),
}

impl Token {
    fn value<>(self) -> Value {
        match self {
            Token::Add => Value::Str(String::from("ADD")),
            Token::All => Value::Str(String::from("ALL")),
            Token::Alter => Value::Str(String::from("ALTER")),
            Token::And => Value::Str(String::from("AND")),
            Token::Any => Value::Str(String::from("ANY")),
            Token::As => Value::Str(String::from("AS")),
            Token::Asc => Value::Str(String::from("ASC")),
            Token::Backup => Value::Str(String::from("BACKUP")),
            Token::Between => Value::Str(String::from("BETWEEN")),
            Token::By => Value::Str(String::from("BY")),
            Token::Case => Value::Str(String::from("CASE")),
            Token::Check => Value::Str(String::from("CHECK")),
            Token::Column => Value::Str(String::from("COLUMN")),
            Token::Constraint => Value::Str(String::from("CONSTRAINT")),
            Token::Create => Value::Str(String::from("CREATE")),
            Token::Database => Value::Str(String::from("DATABASE")),
            Token::Default => Value::Str(String::from("DEFAULT")),
            Token::Delete => Value::Str(String::from("DELETE")),
            Token::Desc => Value::Str(String::from("DESC")),
            Token::Distinct => Value::Str(String::from("DISTINCT")),
            Token::Drop => Value::Str(String::from("DROP")),
            Token::Exec => Value::Str(String::from("EXEC")),
            Token::Exists => Value::Str(String::from("EXISTS")),
            Token::Foreign => Value::Str(String::from("FOREIGN")),
            Token::From => Value::Str(String::from("FROM")),
            Token::Full => Value::Str(String::from("FULL")),
            Token::Group => Value::Str(String::from("GROUP")),
            Token::Having => Value::Str(String::from("HAVING")),
            Token::In => Value::Str(String::from("IN")),
            Token::Index => Value::Str(String::from("INDEX")),
            Token::Inner => Value::Str(String::from("INNER")),
            Token::Insert => Value::Str(String::from("INSERT")),
            Token::Into => Value::Str(String::from("INTO")),
            Token::Is => Value::Str(String::from("IS")),
            Token::Join => Value::Str(String::from("JOIN")),
            Token::Key => Value::Str(String::from("KEY")),
            Token::Left => Value::Str(String::from("LEFT")),
            Token::Like => Value::Str(String::from("LIKE")),
            Token::Limit => Value::Str(String::from("LIMIT")),
            Token::Not => Value::Str(String::from("NOT")),
            Token::Null => Value::Str(String::from("NULL")),
            Token::Or => Value::Str(String::from("OR")),
            Token::Order => Value::Str(String::from("ORDER")),
            Token::Outer => Value::Str(String::from("OUTER")),
            Token::Primary => Value::Str(String::from("PRIMARY")),
            Token::Procedure => Value::Str(String::from("PROCEDURE")),
            Token::Right => Value::Str(String::from("RIGHT")),
            Token::Rownum => Value::Str(String::from("ROWNUM")),
            Token::Select => Value::Str(String::from("SELECT")),
            Token::Set => Value::Str(String::from("SET")),
            Token::Table => Value::Str(String::from("TABLE")),
            Token::Top => Value::Str(String::from("TOP")),
            Token::Truncate => Value::Str(String::from("Truncate")),
            Token::Union => Value::Str(String::from("UNION")),
            Token::Unique => Value::Str(String::from("UNIQUE")),
            Token::Update => Value::Str(String::from("UPDATE")),
            Token::Values => Value::Str(String::from("VALUES")),
            Token::View => Value::Str(String::from("VIEW")),
            Token::Where => Value::Str(String::from("WHERE")),
            Token::AddOperator => Value::Str(String::from("+")),
            Token::SubtractOperator => Value::Str(String::from("-")),
            Token::MultiplyOperator => Value::Str(String::from("*")),
            Token::DivideOperator => Value::Str(String::from("/")),
            Token::ModuloOperator => Value::Str(String::from("%")),
            Token::BitwiseAndOperator => Value::Str(String::from("&")),
            Token::BitwiseOrOperator => Value::Str(String::from("|")),
            Token::BitwiseXorOperator => Value::Str(String::from("^")),
            Token::EqualsOperator => Value::Str(String::from("=")),
            Token::GreaterOperator => Value::Str(String::from(">")),
            Token::LessOperator => Value::Str(String::from("<")),
            Token::GreaterEqualOperator => Value::Str(String::from(">=")),
            Token::LessEqualOperator => Value::Str(String::from("<=")),
            Token::NotEqualOperator => Value::Str(String::from("<>")),
            Token::IdentifierValue(val) => Value::Str(val),
            Token::OperatorInt(val) => Value::Int(val),
            Token::OperatorFloat(val) => Value::Float(val)
        }
    }
}

