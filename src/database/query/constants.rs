pub enum Tokens {
    Add,
    AddConstraint,
    All,
    Alter,
    AlterColumn,
    AlterTable,
    And,
    Any,
    As,
    Asc,
    BackupDatabase,
    Between,
    Case,
    Check,
    Column,
    Constraint,
    Create,
    CreateDatabase,
    CreateIndex,
    CreateOrReplaceView,
    CreateTable,
    CreateProcedure,
    CreateUniqueIndex,
    CreateView,
    Database,
    Default,
    Delete,
    Desc,
    Distinct,
    Drop,
    DropColumn,
    DropConstraint,
    DropDatabase,
    DropDefault,
    DropIndex,
    DropTable,
    DropView,
    Exec,
    Exists,
    ForeignKey,
    From,
    FullOuterJoin,
    GroupBy,
    Having,
    In,
    Index,
    InnerJoin,
    InsertInto,
    InsertIntoSelect,
    IsNull,
    IsNotNull,
    Join,
    LeftJoin,
    Like,
    Limit,
    Not,
    NotNull,
    Or,
    OrderBy,
    OuterJoin,
    PrimaryKey,
    Procedure,
    RightJoin,
    Rownum,
    Select,
    SelectDistinct,
    SelectInto,
    SelectTop,
    Set,
    Table,
    Top,
    TruncateTable,
    Union,
    UnionAll,
    Unique,
    Update,
    Values,
    View,
    Where,
    AddOperator,
    SubtractOperator,
    MultiplyOperator,
    DivideOperator,
    ModuloOperator,
    BitwiseAndOperator,
    BitwiseOrOperator,
    BitwiseXorOperator,
    EqualsOperator,
    GreaterOperator,
    LessOperator,
    GreaterEqualOperator,
    LessEqualOperator,
    NotEqualOperator,
    IdentifierValue(String),
    OperatorInt(i32),
    OperatorFloat(f64)
}

enum Value {
    Str(String),
    Int(i32),
    Float(f64),
}

impl Tokens {
    fn value<>(self) -> Value {
        match self {
            Tokens::Add => Value::Str(String::from("ADD")),
            Tokens::AddConstraint => Value::Str(String::from("ADD CONSTRAINT")),
            Tokens::All => Value::Str(String::from("ALL")),
            Tokens::Alter => Value::Str(String::from("ALTER")),
            Tokens::AlterColumn => Value::Str(String::from("ALTER COLUMN")),
            Tokens::AlterTable => Value::Str(String::from("ALTER TABLE")),
            Tokens::And => Value::Str(String::from("AND")),
            Tokens::Any => Value::Str(String::from("ANY")),
            Tokens::As => Value::Str(String::from("AS")),
            Tokens::Asc => Value::Str(String::from("ASC")),
            Tokens::BackupDatabase => Value::Str(String::from("BACKUP DATABASE")),
            Tokens::Between => Value::Str(String::from("BETWEEN")),
            Tokens::Case => Value::Str(String::from("CASE")),
            Tokens::Check => Value::Str(String::from("CHECK")),
            Tokens::Column => Value::Str(String::from("COLUMN")),
            Tokens::Constraint => Value::Str(String::from("CONSTRAINT")),
            Tokens::Create => Value::Str(String::from("CREATE")),
            Tokens::CreateDatabase => Value::Str(String::from("CREATE DATABASE")),
            Tokens::CreateIndex => Value::Str(String::from("CREATE INDEX")),
            Tokens::CreateOrReplaceView => Value::Str(String::from("CREATE OR REPLACE VIEW")),
            Tokens::CreateTable => Value::Str(String::from("CREATE TABLE")),
            Tokens::CreateProcedure => Value::Str(String::from("CREATE PROCEDURE")),
            Tokens::CreateUniqueIndex => Value::Str(String::from("CREATE UNIQUE INDEX")),
            Tokens::CreateView => Value::Str(String::from("CREATE VIEW")),
            Tokens::Database => Value::Str(String::from("DATABASE")),
            Tokens::Default => Value::Str(String::from("DEFAULT")),
            Tokens::Delete => Value::Str(String::from("DELETE")),
            Tokens::Desc => Value::Str(String::from("DESC")),
            Tokens::Distinct => Value::Str(String::from("DISTINCT")),
            Tokens::Drop => Value::Str(String::from("DROP")),
            Tokens::DropColumn => Value::Str(String::from("DROP COLUMN")),
            Tokens::DropConstraint => Value::Str(String::from("DROP CONSTRAINT")),
            Tokens::DropDatabase => Value::Str(String::from("DROP DATABASE")),
            Tokens::DropDefault => Value::Str(String::from("DROP DEFAULT")),
            Tokens::DropIndex => Value::Str(String::from("DROP INDEX")),
            Tokens::DropTable => Value::Str(String::from("DROP TABLE")),
            Tokens::DropView => Value::Str(String::from("DROP VIEW")),
            Tokens::Exec => Value::Str(String::from("EXEC")),
            Tokens::Exists => Value::Str(String::from("EXISTS")),
            Tokens::ForeignKey => Value::Str(String::from("FOREIGN KEY")),
            Tokens::From => Value::Str(String::from("FROM")),
            Tokens::FullOuterJoin => Value::Str(String::from("FULL OUTER JOIN")),
            Tokens::GroupBy => Value::Str(String::from("GROUP BY")),
            Tokens::Having => Value::Str(String::from("HAVING")),
            Tokens::In => Value::Str(String::from("IN")),
            Tokens::Index => Value::Str(String::from("INDEX")),
            Tokens::InnerJoin => Value::Str(String::from("INNER JOIN")),
            Tokens::InsertInto => Value::Str(String::from("INSERT INTO")),
            Tokens::InsertIntoSelect => Value::Str(String::from("INSERT INTO SELECT")),
            Tokens::IsNull => Value::Str(String::from("IS NULL")),
            Tokens::IsNotNull => Value::Str(String::from("IS NOT NULL")),
            Tokens::Join => Value::Str(String::from("JOIN")),
            Tokens::LeftJoin => Value::Str(String::from("LEFT JOIN")),
            Tokens::Like => Value::Str(String::from("LIKE")),
            Tokens::Limit => Value::Str(String::from("LIMIT")),
            Tokens::Not => Value::Str(String::from("NOT")),
            Tokens::NotNull => Value::Str(String::from("NOT NULL")),
            Tokens::Or => Value::Str(String::from("OR")),
            Tokens::OrderBy => Value::Str(String::from("ORDER BY")),
            Tokens::OuterJoin => Value::Str(String::from("OUTER JOIN")),
            Tokens::PrimaryKey => Value::Str(String::from("PRIMARY KEY")),
            Tokens::Procedure => Value::Str(String::from("PROCEDURE")),
            Tokens::RightJoin => Value::Str(String::from("RIGHT JOIN")),
            Tokens::Rownum => Value::Str(String::from("ROWNUM")),
            Tokens::Select => Value::Str(String::from("SELECT")),
            Tokens::SelectDistinct => Value::Str(String::from("SELECT DISTINCT")),
            Tokens::SelectInto => Value::Str(String::from("SELECT INTO")),
            Tokens::SelectTop => Value::Str(String::from("SELECT TOP")),
            Tokens::Set => Value::Str(String::from("SET")),
            Tokens::Table => Value::Str(String::from("TABLE")),
            Tokens::Top => Value::Str(String::from("TOP")),
            Tokens::TruncateTable => Value::Str(String::from("TRUNCATE TABLE")),
            Tokens::Union => Value::Str(String::from("UNION")),
            Tokens::UnionAll => Value::Str(String::from("UNION ALL")),
            Tokens::Unique => Value::Str(String::from("UNIQUE")),
            Tokens::Update => Value::Str(String::from("UPDATE")),
            Tokens::Values => Value::Str(String::from("VALUES")),
            Tokens::View => Value::Str(String::from("VIEW")),
            Tokens::Where => Value::Str(String::from("WHERE")),
            Tokens::AddOperator => Value::Str(String::from("+")),
            Tokens::SubtractOperator => Value::Str(String::from("-")),
            Tokens::MultiplyOperator => Value::Str(String::from("*")),
            Tokens::DivideOperator => Value::Str(String::from("/")),
            Tokens::ModuloOperator => Value::Str(String::from("%")),
            Tokens::BitwiseAndOperator => Value::Str(String::from("&")),
            Tokens::BitwiseOrOperator => Value::Str(String::from("|")),
            Tokens::BitwiseXorOperator => Value::Str(String::from("^")),
            Tokens::EqualsOperator => Value::Str(String::from("=")),
            Tokens::GreaterOperator => Value::Str(String::from(">")),
            Tokens::LessOperator => Value::Str(String::from("<")),
            Tokens::GreaterEqualOperator => Value::Str(String::from(">=")),
            Tokens::LessEqualOperator => Value::Str(String::from("<=")),
            Tokens::NotEqualOperator => Value::Str(String::from("<>")),
            Tokens::IdentifierValue(val) => Value::Str(val),
            Tokens::OperatorInt(val) => Value::Int(val),
            Tokens::OperatorFloat(val) => Value::Float(val)
        }
    }
}

